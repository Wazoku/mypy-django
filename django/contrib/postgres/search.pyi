# Stubs for django.contrib.postgres.search (Python 3.5)
#
# This file was generated by stubgen and edited by w0rp.

from typing import Any, Optional
from django.db.models import Field
from django.db.models.expressions import CombinedExpression, Func, Value

class SearchVectorField(Field):
    def db_type(self, connection): ...

class SearchQueryField(Field):
    def db_type(self, connection): ...

class SearchVectorCombinable:
    ADD = ...  # type: str

class SearchVector(SearchVectorCombinable, Func):
    function = ...  # type: str
    arg_joiner = ...  # type: str
    config = ...  # type: Any
    source_expressions = ...  # type: Any
    weight = ...  # type: Any
    def __init__(self, *expressions, **extra) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler, connection, function: Optional[Any] = ..., template: Optional[Any] = ...): ...

class CombinedSearchVector(SearchVectorCombinable, CombinedExpression):
    config = ...  # type: Any
    def __init__(self, lhs, connector, rhs, config, output_field: Optional[Any] = ...) -> None: ...

class SearchQueryCombinable:
    BITAND = ...  # type: str
    BITOR = ...  # type: str
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...

class SearchQuery(SearchQueryCombinable, Value):
    invert = ...  # type: bool
    config = ...  # type: Any
    def __init__(self, value, output_field: Optional[Any] = ..., **extra) -> None: ...
    def resolve_expression(self, query: Optional[Any] = ..., allow_joins: bool = ..., reuse: Optional[Any] = ..., summarize: bool = ..., for_save: bool = ...): ...
    def as_sql(self, compiler, connection): ...
    def __invert__(self): ...

class CombinedSearchQuery(SearchQueryCombinable, CombinedExpression):
    config = ...  # type: Any
    def __init__(self, lhs, connector, rhs, config, output_field: Optional[Any] = ...) -> None: ...

class SearchRank(Func):
    function = ...  # type: str
    weights = ...  # type: Any
    def __init__(self, vector, query, **extra) -> None: ...
    def as_sql(self, compiler, connection, function: Optional[Any] = ..., template: Optional[Any] = ...): ...

class TrigramBase(Func):
    def __init__(self, expression, string, **extra) -> None: ...

class TrigramSimilarity(TrigramBase):
    function = ...  # type: str

class TrigramDistance(TrigramBase):
    function = ...  # type: str
    arg_joiner = ...  # type: str
