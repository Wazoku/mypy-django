# Stubs for django.db.models.fields.reverse_related (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class ForeignObjectRel:
    auto_created = ... # type: Any
    concrete = ... # type: Any
    editable = ... # type: Any
    is_relation = ... # type: Any
    null = ... # type: Any
    field = ... # type: Any
    model = ... # type: Any
    related_name = ... # type: Any
    related_query_name = ... # type: Any
    limit_choices_to = ... # type: Any
    parent_link = ... # type: Any
    on_delete = ... # type: Any
    symmetrical = ... # type: Any
    multiple = ... # type: Any
    def __init__(self, field, to, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None): ...
    @property
    def to(self): ...
    def hidden(self): ...
    def name(self): ...
    @property
    def remote_field(self): ...
    @property
    def target_field(self): ...
    def related_model(self): ...
    def many_to_many(self): ...
    def many_to_one(self): ...
    def one_to_many(self): ...
    def one_to_one(self): ...
    def get_prep_lookup(self, lookup_name, value): ...
    def get_lookup(self, lookup_name): ...
    def get_internal_type(self): ...
    @property
    def db_type(self): ...
    def get_choices(self, include_blank=True, blank_choice=..., limit_to_currently_related=False): ...
    def get_db_prep_lookup(self, lookup_type, value, connection, prepared=False): ...
    def is_hidden(self): ...
    def get_joining_columns(self): ...
    def get_extra_restriction(self, where_class, alias, related_alias): ...
    field_name = ... # type: Any
    def set_field_name(self): ...
    def get_accessor_name(self, model=None): ...
    def get_cache_name(self): ...
    def get_path_info(self): ...

class ManyToOneRel(ForeignObjectRel):
    field_name = ... # type: Any
    def __init__(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None): ...
    def get_related_field(self): ...
    def set_field_name(self): ...

class OneToOneRel(ManyToOneRel):
    multiple = ... # type: Any
    def __init__(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None): ...

class ManyToManyRel(ForeignObjectRel):
    through = ... # type: Any
    through_fields = ... # type: Any
    symmetrical = ... # type: Any
    db_constraint = ... # type: Any
    def __init__(self, field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True): ...
    def get_related_field(self): ...
