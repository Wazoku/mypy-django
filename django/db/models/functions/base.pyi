# Stubs for django.db.models.functions.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.models import Func, Transform

class Cast(Func):
    function = ...  # type: str
    template = ...  # type: str
    mysql_types = ...  # type: Any
    def __init__(self, expression, output_field) -> None: ...
    def as_sql(self, compiler, connection, **extra_context): ...
    def as_mysql(self, compiler, connection): ...
    def as_postgresql(self, compiler, connection): ...

class Coalesce(Func):
    function = ...  # type: str
    def __init__(self, *expressions, **extra) -> None: ...
    def as_oracle(self, compiler, connection): ...

class ConcatPair(Func):
    function = ...  # type: str
    def __init__(self, left, right, **extra) -> None: ...
    def as_sqlite(self, compiler, connection): ...
    def as_mysql(self, compiler, connection): ...
    def coalesce(self): ...

class Concat(Func):
    function = ...  # type: Any
    template = ...  # type: str
    def __init__(self, *expressions, **extra) -> None: ...

class Greatest(Func):
    function = ...  # type: str
    def __init__(self, *expressions, **extra) -> None: ...
    def as_sqlite(self, compiler, connection): ...

class Least(Func):
    function = ...  # type: str
    def __init__(self, *expressions, **extra) -> None: ...
    def as_sqlite(self, compiler, connection): ...

class Length(Transform):
    function = ...  # type: str
    lookup_name = ...  # type: str
    def __init__(self, expression, **extra) -> None: ...
    def as_mysql(self, compiler, connection): ...

class Lower(Transform):
    function = ...  # type: str
    lookup_name = ...  # type: str

class Now(Func):
    template = ...  # type: str
    def __init__(self, output_field: Optional[Any] = ..., **extra) -> None: ...
    def as_postgresql(self, compiler, connection): ...

class Substr(Func):
    function = ...  # type: str
    def __init__(self, expression, pos, length: Optional[Any] = ..., **extra) -> None: ...
    def as_sqlite(self, compiler, connection): ...
    def as_oracle(self, compiler, connection): ...

class Upper(Transform):
    function = ...  # type: str
    lookup_name = ...  # type: str
