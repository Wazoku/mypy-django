# Stubs for django.db.models.lookups (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.models.expressions import Func
from django.db.models.query_utils import RegisterLookupMixin

class Lookup:
    lookup_name = ...  # type: Any
    prepare_rhs = ...  # type: bool
    rhs = ...  # type: Any
    bilateral_transforms = ...  # type: Any
    def __init__(self, lhs, rhs) -> None: ...
    def apply_bilateral_transforms(self, value): ...
    def batch_process_rhs(self, compiler, connection, rhs: Optional[Any] = ...): ...
    def get_source_expressions(self): ...
    lhs = ...  # type: Any
    def set_source_expressions(self, new_exprs): ...
    def get_prep_lookup(self): ...
    def get_db_prep_lookup(self, value, connection): ...
    def process_lhs(self, compiler, connection, lhs: Optional[Any] = ...): ...
    def process_rhs(self, compiler, connection): ...
    def rhs_is_direct_value(self): ...
    def relabeled_clone(self, relabels): ...
    def get_group_by_cols(self): ...
    def as_sql(self, compiler, connection): ...
    def contains_aggregate(self): ...
    @property
    def is_summary(self): ...

class Transform(RegisterLookupMixin, Func):
    bilateral = ...  # type: bool
    arity = ...  # type: int
    @property
    def lhs(self): ...
    def get_bilateral_transforms(self): ...

class BuiltinLookup(Lookup):
    def process_lhs(self, compiler, connection, lhs: Optional[Any] = ...): ...
    def as_sql(self, compiler, connection): ...
    def get_rhs_op(self, connection, rhs): ...

class FieldGetDbPrepValueMixin:
    get_db_prep_lookup_value_is_iterable = ...  # type: bool
    def get_db_prep_lookup(self, value, connection): ...

class FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin):
    get_db_prep_lookup_value_is_iterable = ...  # type: bool
    def get_prep_lookup(self): ...
    def process_rhs(self, compiler, connection): ...
    def resolve_expression_parameter(self, compiler, connection, sql, param): ...
    def batch_process_rhs(self, compiler, connection, rhs: Optional[Any] = ...): ...

class Exact(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name = ...  # type: str

class IExact(BuiltinLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class GreaterThan(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name = ...  # type: str

class GreaterThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name = ...  # type: str

class LessThan(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name = ...  # type: str

class LessThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name = ...  # type: str

class IntegerFieldFloatRounding:
    rhs = ...  # type: Any
    def get_prep_lookup(self): ...

class IntegerGreaterThanOrEqual(IntegerFieldFloatRounding, GreaterThanOrEqual): ...
class IntegerLessThan(IntegerFieldFloatRounding, LessThan): ...

class DecimalComparisonLookup:
    def as_sqlite(self, compiler, connection): ...

class DecimalGreaterThan(DecimalComparisonLookup, GreaterThan): ...
class DecimalGreaterThanOrEqual(DecimalComparisonLookup, GreaterThanOrEqual): ...
class DecimalLessThan(DecimalComparisonLookup, LessThan): ...
class DecimalLessThanOrEqual(DecimalComparisonLookup, LessThanOrEqual): ...

class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
    lookup_name = ...  # type: str
    def process_rhs(self, compiler, connection): ...
    def get_rhs_op(self, connection, rhs): ...
    def as_sql(self, compiler, connection): ...
    def split_parameter_list_as_sql(self, compiler, connection): ...

class PatternLookup(BuiltinLookup):
    def get_rhs_op(self, connection, rhs): ...

class Contains(PatternLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class IContains(Contains):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool

class StartsWith(PatternLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class IStartsWith(PatternLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class EndsWith(PatternLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class IEndsWith(PatternLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def process_rhs(self, qn, connection): ...

class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
    lookup_name = ...  # type: str
    def get_rhs_op(self, connection, rhs): ...

class IsNull(BuiltinLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def as_sql(self, compiler, connection): ...

class Search(BuiltinLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def as_sql(self, compiler, connection): ...

class Regex(BuiltinLookup):
    lookup_name = ...  # type: str
    prepare_rhs = ...  # type: bool
    def as_sql(self, compiler, connection): ...

class IRegex(Regex):
    lookup_name = ...  # type: str

class YearLookup(Lookup):
    def year_lookup_bounds(self, connection, year): ...

class YearComparisonLookup(YearLookup):
    def as_sql(self, compiler, connection): ...
    def get_rhs_op(self, connection, rhs): ...
    def get_bound(self): ...

class YearExact(YearLookup, Exact):
    lookup_name = ...  # type: str
    def as_sql(self, compiler, connection): ...

class YearGt(YearComparisonLookup):
    lookup_name = ...  # type: str
    def get_bound(self, start, finish): ...

class YearGte(YearComparisonLookup):
    lookup_name = ...  # type: str
    def get_bound(self, start, finish): ...

class YearLt(YearComparisonLookup):
    lookup_name = ...  # type: str
    def get_bound(self, start, finish): ...

class YearLte(YearComparisonLookup):
    lookup_name = ...  # type: str
    def get_bound(self, start, finish): ...
