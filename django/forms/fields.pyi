# Stubs for django.forms.fields (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from django.utils.deprecation import RenameMethodsBase
from django.utils.translation import ugettext_lazy as _

class RenameFieldMethods(RenameMethodsBase):
    renamed_methods = ... # type: Any

class Field:
    widget = ... # type: Any
    hidden_widget = ... # type: Any
    default_validators = ... # type: Any
    default_error_messages = ... # type: Any
    empty_values = ... # type: Any
    creation_counter = ... # type: Any
    show_hidden_initial = ... # type: Any
    help_text = ... # type: Any
    disabled = ... # type: Any
    label_suffix = ... # type: Any
    localize = ... # type: Any
    error_messages = ... # type: Any
    validators = ... # type: Any
    def __init__(self, required=True, widget=None, label=None, initial=None, help_text='', error_messages=None, show_hidden_initial=False, validators=..., localize=False, disabled=False, label_suffix=None): ...
    def prepare_value(self, value): ...
    def to_python(self, value): ...
    def validate(self, value): ...
    def run_validators(self, value): ...
    def clean(self, value): ...
    def bound_data(self, data, initial): ...
    def widget_attrs(self, widget): ...
    def has_changed(self, initial, data): ...
    def get_bound_field(self, form, field_name): ...
    def __deepcopy__(self, memo): ...

class CharField(Field):
    max_length = ... # type: Any
    min_length = ... # type: Any
    strip = ... # type: Any
    def __init__(self, max_length=None, min_length=None, strip=True, *args, **kwargs): ...
    def to_python(self, value): ...
    def widget_attrs(self, widget): ...

class IntegerField(Field):
    widget = ... # type: Any
    default_error_messages = ... # type: Any
    re_decimal = ... # type: Any
    def __init__(self, max_value=None, min_value=None, *args, **kwargs): ...
    def to_python(self, value): ...
    def widget_attrs(self, widget): ...

class FloatField(IntegerField):
    default_error_messages = ... # type: Any
    def to_python(self, value): ...
    def validate(self, value): ...
    def widget_attrs(self, widget): ...

class DecimalField(IntegerField):
    default_error_messages = ... # type: Any
    def __init__(self, max_value=None, min_value=None, max_digits=None, decimal_places=None, *args, **kwargs): ...
    def to_python(self, value): ...
    def validate(self, value): ...
    def widget_attrs(self, widget): ...

class BaseTemporalField(Field):
    input_formats = ... # type: Any
    def __init__(self, input_formats=None, *args, **kwargs): ...
    def to_python(self, value): ...
    def strptime(self, value, format): ...

class DateField(BaseTemporalField):
    widget = ... # type: Any
    input_formats = ... # type: Any
    default_error_messages = ... # type: Any
    def to_python(self, value): ...
    def strptime(self, value, format): ...

class TimeField(BaseTemporalField):
    widget = ... # type: Any
    input_formats = ... # type: Any
    default_error_messages = ... # type: Any
    def to_python(self, value): ...
    def strptime(self, value, format): ...

class DateTimeField(BaseTemporalField):
    widget = ... # type: Any
    input_formats = ... # type: Any
    default_error_messages = ... # type: Any
    def prepare_value(self, value): ...
    def to_python(self, value): ...
    def strptime(self, value, format): ...

class DurationField(Field):
    default_error_messages = ... # type: Any
    def prepare_value(self, value): ...
    def to_python(self, value): ...

class RegexField(CharField):
    def __init__(self, regex, max_length=None, min_length=None, error_message=None, *args, **kwargs): ...
    regex = ... # type: Any

class EmailField(CharField):
    widget = ... # type: Any
    default_validators = ... # type: Any
    def clean(self, value): ...

class FileField(Field):
    widget = ... # type: Any
    default_error_messages = ... # type: Any
    max_length = ... # type: Any
    allow_empty_file = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def to_python(self, data): ...
    def clean(self, data, initial=None): ...
    def bound_data(self, data, initial): ...
    def has_changed(self, initial, data): ...

class ImageField(FileField):
    default_error_messages = ... # type: Any
    def to_python(self, data): ...

class URLField(CharField):
    widget = ... # type: Any
    default_error_messages = ... # type: Any
    default_validators = ... # type: Any
    def to_python(self, value): ...
    def clean(self, value): ...

class BooleanField(Field):
    widget = ... # type: Any
    def to_python(self, value): ...
    def validate(self, value): ...
    def has_changed(self, initial, data): ...

class NullBooleanField(BooleanField):
    widget = ... # type: Any
    def to_python(self, value): ...
    def validate(self, value): ...
    def has_changed(self, initial, data): ...

class CallableChoiceIterator:
    choices_func = ... # type: Any
    def __init__(self, choices_func): ...
    def __iter__(self): ...

class ChoiceField(Field):
    widget = ... # type: Any
    default_error_messages = ... # type: Any
    choices = ... # type: Any
    def __init__(self, choices=..., required=True, widget=None, label=None, initial=None, help_text='', *args, **kwargs): ...
    def __deepcopy__(self, memo): ...
    def to_python(self, value): ...
    def validate(self, value): ...
    def valid_value(self, value): ...

class TypedChoiceField(ChoiceField):
    coerce = ... # type: Any
    empty_value = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def clean(self, value): ...

class MultipleChoiceField(ChoiceField):
    hidden_widget = ... # type: Any
    widget = ... # type: Any
    default_error_messages = ... # type: Any
    def to_python(self, value): ...
    def validate(self, value): ...
    def has_changed(self, initial, data): ...

class TypedMultipleChoiceField(MultipleChoiceField):
    coerce = ... # type: Any
    empty_value = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def clean(self, value): ...
    def validate(self, value): ...

class ComboField(Field):
    fields = ... # type: Any
    def __init__(self, fields=..., *args, **kwargs): ...
    def clean(self, value): ...

class MultiValueField(Field):
    default_error_messages = ... # type: Any
    require_all_fields = ... # type: Any
    fields = ... # type: Any
    def __init__(self, fields=..., *args, **kwargs): ...
    def __deepcopy__(self, memo): ...
    def validate(self, value): ...
    def clean(self, value): ...
    def compress(self, data_list): ...
    def has_changed(self, initial, data): ...

class FilePathField(ChoiceField):
    choices = ... # type: Any
    match_re = ... # type: Any
    def __init__(self, path, match=None, recursive=False, allow_files=True, allow_folders=False, required=True, widget=None, label=None, initial=None, help_text='', *args, **kwargs): ...

class SplitDateTimeField(MultiValueField):
    widget = ... # type: Any
    hidden_widget = ... # type: Any
    default_error_messages = ... # type: Any
    def __init__(self, input_date_formats=None, input_time_formats=None, *args, **kwargs): ...
    def compress(self, data_list): ...

class GenericIPAddressField(CharField):
    unpack_ipv4 = ... # type: Any
    default_validators = ... # type: Any
    def __init__(self, protocol='', unpack_ipv4=False, *args, **kwargs): ...
    def to_python(self, value): ...

class SlugField(CharField):
    default_validators = ... # type: Any
    allow_unicode = ... # type: Any
    def __init__(self, *args, **kwargs): ...

class UUIDField(CharField):
    default_error_messages = ... # type: Any
    def prepare_value(self, value): ...
    def to_python(self, value): ...
