# Stubs for django.forms.widgets (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class Media:
    def __init__(self, media=None, **kwargs): ...
    def render(self): ...
    def render_js(self): ...
    def render_css(self): ...
    def absolute_path(self, path, prefix=None): ...
    def __getitem__(self, name): ...
    def add_js(self, data): ...
    def add_css(self, data): ...
    def __add__(self, other): ...

class MediaDefiningClass(type):
    def __new__(mcs, name, bases, attrs): ...

class SubWidget:
    parent_widget = ... # type: Any
    def __init__(self, parent_widget, name, value, attrs, choices): ...

class Widget:
    needs_multipart_form = ... # type: Any
    is_localized = ... # type: Any
    is_required = ... # type: Any
    supports_microseconds = ... # type: Any
    attrs = ... # type: Any
    def __init__(self, attrs=None): ...
    def __deepcopy__(self, memo): ...
    @property
    def is_hidden(self): ...
    def subwidgets(self, name, value, attrs=None, choices=...): ...
    def render(self, name, value, attrs=None): ...
    def build_attrs(self, extra_attrs=None, **kwargs): ...
    def value_from_datadict(self, data, files, name): ...
    def id_for_label(self, id_): ...

class Input(Widget):
    input_type = ... # type: Any
    def render(self, name, value, attrs=None): ...

class TextInput(Input):
    input_type = ... # type: Any
    def __init__(self, attrs=None): ...

class NumberInput(TextInput):
    input_type = ... # type: Any

class EmailInput(TextInput):
    input_type = ... # type: Any

class URLInput(TextInput):
    input_type = ... # type: Any

class PasswordInput(TextInput):
    input_type = ... # type: Any
    render_value = ... # type: Any
    def __init__(self, attrs=None, render_value=False): ...
    def render(self, name, value, attrs=None): ...

class HiddenInput(Input):
    input_type = ... # type: Any

class MultipleHiddenInput(HiddenInput):
    choices = ... # type: Any
    def __init__(self, attrs=None, choices=...): ...
    def render(self, name, value, attrs=None, choices=...): ...
    def value_from_datadict(self, data, files, name): ...

class FileInput(Input):
    input_type = ... # type: Any
    needs_multipart_form = ... # type: Any
    def render(self, name, value, attrs=None): ...
    def value_from_datadict(self, data, files, name): ...

class ClearableFileInput(FileInput):
    initial_text = ... # type: Any
    input_text = ... # type: Any
    clear_checkbox_label = ... # type: Any
    template_with_initial = ... # type: Any
    template_with_clear = ... # type: Any
    def clear_checkbox_name(self, name): ...
    def clear_checkbox_id(self, name): ...
    def is_initial(self, value): ...
    def get_template_substitution_values(self, value): ...
    def render(self, name, value, attrs=None): ...
    def value_from_datadict(self, data, files, name): ...

class Textarea(Widget):
    def __init__(self, attrs=None): ...
    def render(self, name, value, attrs=None): ...

class DateTimeBaseInput(TextInput):
    format_key = ... # type: Any
    supports_microseconds = ... # type: Any
    format = ... # type: Any
    def __init__(self, attrs=None, format=None): ...

class DateInput(DateTimeBaseInput):
    format_key = ... # type: Any

class DateTimeInput(DateTimeBaseInput):
    format_key = ... # type: Any

class TimeInput(DateTimeBaseInput):
    format_key = ... # type: Any

class CheckboxInput(Widget):
    check_test = ... # type: Any
    def __init__(self, attrs=None, check_test=None): ...
    def render(self, name, value, attrs=None): ...
    def value_from_datadict(self, data, files, name): ...

class Select(Widget):
    allow_multiple_selected = ... # type: Any
    choices = ... # type: Any
    def __init__(self, attrs=None, choices=...): ...
    def __deepcopy__(self, memo): ...
    def render(self, name, value, attrs=None, choices=...): ...
    def render_option(self, selected_choices, option_value, option_label): ...
    def render_options(self, choices, selected_choices): ...

class NullBooleanSelect(Select):
    def __init__(self, attrs=None): ...
    def render(self, name, value, attrs=None, choices=...): ...
    def value_from_datadict(self, data, files, name): ...

class SelectMultiple(Select):
    allow_multiple_selected = ... # type: Any
    def render(self, name, value, attrs=None, choices=...): ...
    def value_from_datadict(self, data, files, name): ...

class ChoiceInput(SubWidget):
    input_type = ... # type: Any
    name = ... # type: Any
    value = ... # type: Any
    attrs = ... # type: Any
    choice_value = ... # type: Any
    choice_label = ... # type: Any
    index = ... # type: Any
    def __init__(self, name, value, attrs, choice, index): ...
    def render(self, name=None, value=None, attrs=None, choices=...): ...
    def is_checked(self): ...
    def tag(self, attrs=None): ...
    @property
    def id_for_label(self): ...

class RadioChoiceInput(ChoiceInput):
    input_type = ... # type: Any
    value = ... # type: Any
    def __init__(self, *args, **kwargs): ...

class CheckboxChoiceInput(ChoiceInput):
    input_type = ... # type: Any
    value = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def is_checked(self): ...

class ChoiceFieldRenderer:
    choice_input_class = ... # type: Any
    outer_html = ... # type: Any
    inner_html = ... # type: Any
    name = ... # type: Any
    value = ... # type: Any
    attrs = ... # type: Any
    choices = ... # type: Any
    def __init__(self, name, value, attrs, choices): ...
    def __getitem__(self, idx): ...
    def render(self): ...

class RadioFieldRenderer(ChoiceFieldRenderer):
    choice_input_class = ... # type: Any

class CheckboxFieldRenderer(ChoiceFieldRenderer):
    choice_input_class = ... # type: Any

class RendererMixin:
    renderer = ... # type: Any
    def __init__(self, *args, **kwargs): ...
    def subwidgets(self, name, value, attrs=None, choices=...): ...
    def get_renderer(self, name, value, attrs=None, choices=...): ...
    def render(self, name, value, attrs=None, choices=...): ...
    def id_for_label(self, id_): ...

class RadioSelect(RendererMixin, Select):
    renderer = ... # type: Any

class CheckboxSelectMultiple(RendererMixin, SelectMultiple):
    renderer = ... # type: Any

class MultiWidget(Widget):
    widgets = ... # type: Any
    def __init__(self, widgets, attrs=None): ...
    @property
    def is_hidden(self): ...
    def render(self, name, value, attrs=None): ...
    def id_for_label(self, id_): ...
    def value_from_datadict(self, data, files, name): ...
    def format_output(self, rendered_widgets): ...
    def decompress(self, value): ...
    media = ... # type: Any
    def __deepcopy__(self, memo): ...
    @property
    def needs_multipart_form(self): ...

class SplitDateTimeWidget(MultiWidget):
    supports_microseconds = ... # type: Any
    def __init__(self, attrs=None, date_format=None, time_format=None): ...
    def decompress(self, value): ...

class SplitHiddenDateTimeWidget(SplitDateTimeWidget):
    def __init__(self, attrs=None, date_format=None, time_format=None): ...

class SelectDateWidget(Widget):
    none_value = ... # type: Any
    month_field = ... # type: Any
    day_field = ... # type: Any
    year_field = ... # type: Any
    select_widget = ... # type: Any
    date_re = ... # type: Any
    attrs = ... # type: Any
    years = ... # type: Any
    months = ... # type: Any
    year_none_value = ... # type: Any
    month_none_value = ... # type: Any
    day_none_value = ... # type: Any
    def __init__(self, attrs=None, years=None, months=None, empty_label=None): ...
    def render(self, name, value, attrs=None): ...
    def id_for_label(self, id_): ...
    def value_from_datadict(self, data, files, name): ...
    def create_select(self, name, field, value, val, choices, none_value): ...
